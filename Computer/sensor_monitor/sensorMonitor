-- read all the sensors and show cool stuff on 
-- the monitor

--os.loadAPI("serialize")

-- check for debug mode
local isDebug = false
local isRunning = true
local arg = { ... }
if arg[1] == 'debug' then
  isDebug = true
  debugFile = io.open("sensorDebug.txt", "w")
end

local MODEM_CHANNEL_CONTROL = 3
local MODEM_CHANNEL_DATA = 4
local MONITOR_FREQUENCY = 1

-- check sides for monitor, modem and sensor and 
-- initialize them
function initPeripherals()
  -- loop through sides and initialize peripherals
  for k, v in pairs(rs.getSides()) do
    local pType = peripheral.getType(v)
    if pType == "modem" then
      print('found modem')
      modem = peripheral.wrap(v)
      modem.open(MODEM_CHANNEL_DATA)
      --print("Loaded Modem from " .. v)
    elseif pType == "sensor" then
      os.loadAPI("ocs/apis/sensor")
      snsr = sensor.wrap(v)
      print("Loaded Sensor from " .. v)
    elseif pType == "monitor" then
      print('found monitor')
      mon = peripheral.wrap(v)
    end
  end
end

local monWidth, monHeight = term.getSize()
function updateMonitorTime()
  local out = "Day " .. os.day() .. ", " .. textutils.formatTime(os.time(), false)
  mon.setCursorPos(monWidth - #out, 1)
  mon.write(out)
end

function refreshMonitor()
  mon.clear()
  updateMonitorTime()
end

function requestSensorData()
  --print('Requesting sensor data on channel ' .. MODEM_CHANNEL_CONTROL)
  modem.transmit(MODEM_CHANNEL_CONTROL
    , MODEM_CHANNEL_DATA
    , "getSensorData")
end

function parseSesnsorData(data)
  
  local out
  if #data['sensors'] then
    for i, snsr in ipairs(data['sensors']) do
      --print(i .. ' = ' .. snsr['name'])
      if snsr['name'] == 'openccsensors.item.appliedenergisticssensor' then
        local usedPct = math.floor((snsr['data']['ME Wireless Access Point']['UsedBytes'] / (snsr['data']['ME Wireless Access Point']['UsedBytes'] + snsr['data']['ME Wireless Access Point']['FreeBytes'])) * 100)
        out = usedPct .. '% of ME storage is in use for ' .. snsr['data']['ME Wireless Access Point']['UsedCount'] .. ' items.\n'
      elseif snsr['name'] == 'openccsensors.item.industrialcraftsensor' then
      end
    end
  end
  refreshMonitor()
  mon.setCursorPos(1, 2)
  mon.write(out)
  --print(out)
end

-- listen for incoming network data
function handleNetworkEvent()
  --print('Listening for sensor data on channel ' .. MODEM_CHANNEL_DATA)
  local event, side, receivedChannel, replyChannel, reply, distance = os.pullEvent("modem_message")
  --print("Side: " .. side)
  --print("Sent Channel: " .. receivedChannel)
  --print("Reply Channel: " .. replyChannel)
  --print("Distance: " .. distance)
  if receivedChannel == MODEM_CHANNEL_DATA then
    local sensorData = loadstring(reply)()
    --print('received data')
    parseSesnsorData(sensorData)
  end
end

-- listen for key presses
function handleKeyPress()
  --print('Press X to quit.')
  local event, key = os.pullEvent("char")
  if key == "x" or key == "X" then
    isRunning = false
    return
  end
end

initPeripherals()
refreshMonitor()

-- main loop
while isRunning do
  sleep(MONITOR_FREQUENCY)
  --refreshMonitor()
  requestSensorData()
  parallel.waitForAny(handleNetworkEvent, handleKeyPress)
end

-- listen for data
--[[
for event, p1, p2, p3, p4, p5 in os.pullEvent do
  if event == "modem_message" then
    if p2 == MODEM_CHANNEL_DATA and p4 then 
      local out = "Event: " .. event .. "\n"
      out = out .. "Side: " .. p1 .. "\n"
      out = out .. "Sent Channel: " .. p2 .. "\n"
      out = out .. "Reply Channel: " .. p3 .. "\n"
      out = out .. "Distance: " .. p5 .. "\n"
			local sensorData = loadstring(p4)()
      parseSesnsorData(sensorData)
    elseif p2 == MODEM_CHANNEL_CONTROL then
      print("Control Response not Implemented")
    end
  elseif event == "char" and p1 == "x" then
    break 
  end
end
]]

print()
print("wasn't that fun.")
